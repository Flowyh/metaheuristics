using TSPLIB
using Random
using UnicodePlots

"""
    structToDict(s) -> Dict

Converts struct object to Dict.

Ref: https://stackoverflow.com/a/70317636.

## Params:
- `s::Struct`: struct obj to convert to dict.

## Returns:
- `Dict`: struct converted to dict.

"""
function structToDict(s)
  return Dict(key => getfield(s, key) for key in propertynames(s))
end

"""
    nodeWeightSum(path, weights) -> Float64

Returns path's weight.

## Params:
- `path::Vector{T<:Integer}`: visited nodes in a given path.
- `weights::AbstractMatrix{Float64}`: matrix of weights between nodes.

## Returns:
- `Float64`: Sum of weights between nodes in given path.

"""
function nodeWeightSum(path::Vector{T}, weights::AbstractMatrix{Float64}) where T<:Integer
  @assert isperm(path) "Invalid path provided"
  result = length(path) != size(weights, 1) ? zero(Float64) : weights[path[end], path[1]]
  for i = 1:length(path)-1
    result += weights[path[i], path[i + 1]]
  end
  return result
end

"""
    getPathCoordsVector(path, coords) -> (Array{Float64}, Array{Float64})

Create a tuple of X and Y coords arrays in given path order.

## Params:
- `path::Vector{T<:Integer}`: visited nodes in a given path.
- `coords::AbstractMatrix{Float64}`: nodes' coordinates.

## Returns:
- Two element tuple of X/Y coords arrays. 

"""
function getPathCoordsVector(path::Vector{T}, coords::AbstractMatrix{Float64}) where T<:Integer
  x = Vector{Integer}();
  y = Vector{Integer}();
  for node in path
    node_coords = coords[node, :]
    append!(x, node_coords[1])
    append!(y, node_coords[2])
  end
  return (x, y)
end

"""
    openTSPFile()

Asks for `TSP` data direcory path and filename.

Opens the file and returns a struct type generated by TSPLIB.

## Returns:
- `TSP`: struct read from file from path.

"""
function openTSPFile()
  println("Hello! Please provide full path to your data folder: ")
  path = chomp(readline())
  for (root, dirs, files) in walkdir(path)
    global options = files
  end
  filter!(s->occursin(r".tsp", s), options)
  for el in options
    for i in 1:4 print(el, "   ") end
    println()
  end
  println()
  println("Choose a file by writing a full file name:  ")
  response = chomp(readline())
  return readTSP(path * "/" * response)
end

"""
    krandom(tsp_data) -> Array{Integer}

Returns a random permutation of given length.

## Params:
- `tsp_data::Dict`: `TSP` dataset.

## Returns:
- Permutation of `TSP` dataset nodes.

"""
function krandom(tsp_data::Dict, args...)
  return shuffle(collect(1:tsp_data[:dimension]))
end

"""
    twoopt(tsp_data) -> Array{Integer}

Calculate best path of n nodes and their weights using 2-OPT algorithm.

Initial path is chosen at random using krandom().

## Params:
- `tsp_data::Dict`: `TSP` dataset.

## returns:
- `Array{Integer}` Best path computed.

"""
function twoopt(tsp_data::Dict, args...)
  path = krandom(tsp_data)
  function swap(x, y)
    swapped_path = copy(path)
    swapped_path[x], swapped_path[y] = swapped_path[y], swapped_path[x]
    return swapped_path
  end
  best_distance = nodeWeightSum(path, tsp_data[:weights])
  for i in 2:length(path)
    for j in i+1:length(path)
      current_neigh = swap(i, j)
      @assert isperm(current_neigh)
      current_distance = nodeWeightSum(current_neigh, tsp_data[:weights])
      if (current_distance < best_distance) 
        best_distance = current_distance
        path = current_neigh
      end
    end
  end
  return path
end

"""
    TSPLIB(tsp_data, test_func, tests_num)

Runs `test_num` tests on given tsp_data dictionary.

Requires `test_func` function to compute path for current dataset.

## Params:
- `tsp_data::Dict`: `TSP` data.
- `test_func::{Function}`: function used to calculate a path for current TSP nodes.
- `tests_num::{Int}`: number of performed tests.

"""
function TSPtest(tsp_data::Dict, test_func::Function, objective::Function, tests_num::Int, args...)
  best_path=[]
  best_distance=typemax(Float64)
  for i in 1:tests_num
    println("\n\n=================TEST $i================")
    computed_path = test_func(tsp_data, args...)
    # Test info:
    println("Dataset name: ", tsp_data[:name])
    println("Nodes: ", tsp_data[:dimension])
    println("Path: ", computed_path)
    curr_distance = objective(computed_path, tsp_data[:weights])
    println("Distance: ", curr_distance)
    if (curr_distance < best_distance) 
      best_distance = curr_distance
      best_path = computed_path
    end
    println("=============END OF TEST $i=============")
  end

  println("\n\n==================BEST==================")
  println("Path: ", best_path)
  println("Distance: ", best_distance)
  println("Plot:")
  coords = getPathCoordsVector(best_path, tsp_data[:nodes])
  plt = lineplot(coords[1], coords[2]; title="Current path", height=20, width=40)
  println(plt)
  println("==============END OF TESTS==============")  
end

"""
Main program function.
"""
function main()
  tsp = openTSPFile()
  dict_tsp = structToDict(tsp)
  twoopt(dict_tsp)
  # println(dict_tsp[:weights][1, :])
  TSPtest(dict_tsp, twoopt, nodeWeightSum, 100000, "testtripledot")
end

main()